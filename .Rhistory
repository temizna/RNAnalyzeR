scale_x_log10() +
scale_color_manual(values = c("Up" = "firebrick", "Down" = "royalblue", "NS" = "grey")) +
theme_minimal() +
labs(title = "MA Plot", x = "Mean Expression (log scale)", y = "Log2 Fold Change") +
theme(legend.position = "top")
})
output$download_ma_plot <- downloadHandler(
filename = function() { "ma_plot.pdf" },
content = function(file) {
res <- res_reactive()
req(res,input$volcano_gene_label)
res_df <- as.data.frame(res)
res_df$gene <- rownames(res_df)
res_df$threshold <- "NS"
res_df$threshold[res_df$log2FoldChange >= input$volcano_lfc & res_df$padj <= input$volcano_padj] <- "Up"
res_df$threshold[res_df$log2FoldChange <= -input$volcano_lfc & res_df$padj <= input$volcano_padj] <- "Down"
highlight_genes <- if (nchar(trimws(input$volcano_select)) > 0) unlist(strsplit(input$volcano_select, "[ \t,]+")) else character(0)
if (length(highlight_genes) == 1 && highlight_genes == "") highlight_genes <- character(0)
top_genes <- head(res_df[order(res_df$padj), "gene"], input$volcano_gene_label)
label_genes <- union(top_genes, highlight_genes)
res_df$label <- ifelse(res_df$gene %in% label_genes & abs(res_df$log2FoldChange) > 1, res_df$gene, NA)
res_df <- res_df[is.finite(res_df$log2FoldChange) & is.finite(res_df$padj) & res_df$padj > 0, ]
p <-  ggplot(res_df, aes(x = baseMean, y = log2FoldChange, color = threshold)) +
geom_point(alpha = 0.6) +
ggrepel::geom_text_repel(
data = subset(res_df, !is.na(label)),
aes(label = label),
size = 3,
max.overlaps = Inf,
box.padding = 0.5,
point.padding = 0.3,
segment.color = "grey30"
) +
scale_x_log10() +
scale_color_manual(values = c("Up" = "firebrick", "Down" = "royalblue", "NS" = "grey")) +
theme_minimal() +
labs(title = "MA Plot", x = "Mean Expression (log scale)", y = "Log2 Fold Change") +
theme(legend.position = "top")
pdf(file)
print(p)
dev.off()
})
res_x <- reactiveVal()
res_y <- reactiveVal()
observeEvent(input$metadata_column_x, {
req(input$metadata_column_x)
updateSelectInput(session, "reference_condition_x", choices = unique(data$samples[[input$metadata_column_x]]))
updateSelectInput(session, "test_condition_x", choices = unique(data$samples[[input$metadata_column_x]]))
})
observeEvent(input$metadata_column_y, {
req(input$metadata_column_y)
updateSelectInput(session, "reference_condition_y", choices = unique(data$samples[[input$metadata_column_y]]))
updateSelectInput(session, "test_condition_y", choices = unique(data$samples[[input$metadata_column_y]]))
})
observeEvent(input$run_crossplot, {
# load("dds_preprocessed.rda")
dds_x <- dds
dds_x@colData[[input$metadata_column_x]] <- factor(dds_x@colData[[input$metadata_column_x]])
dds_x <- DESeq(dds_x)
resx <- results(dds_x, contrast = c(input$metadata_column_x, input$test_condition_x, input$reference_condition_x))
resx <- as.data.frame(resx)
resx$gene <- rownames(resx)
dds_y <- dds
dds_y@colData[[input$metadata_column_y]] <- factor(dds_y@colData[[input$metadata_column_y]])
dds_y <- DESeq(dds_y)
resy <- results(dds_y, contrast = c(input$metadata_column_y, input$test_condition_y, input$reference_condition_y))
resy <- as.data.frame(resy)
resy$gene <- rownames(resy)
res_x(resx)
res_y(resy)
})
output$crossPlot <- renderPlot({
req(input$crossplot_gene_count, input$crossplot_topgenes)
#input$crossplot_gene_label,
req(res_x(), res_y())
merged <- merge(res_x(), res_y(), by = "gene", suffixes = c("_x", "_y"))
merged <- merged[order(merged$padj_x), ]
# Define categories
merged$category <- "Other"
merged$category[merged$log2FoldChange_x >= 1 & merged$log2FoldChange_y >= 1] <- "Up-Up"
merged$category[merged$log2FoldChange_x <= -1 & merged$log2FoldChange_y <= -1] <- "Down-Down"
merged$category[merged$log2FoldChange_x > 1 & abs(merged$log2FoldChange_y) <= 1] <- "Comp1-only"
merged$category[abs(merged$log2FoldChange_x) <= 1 & merged$log2FoldChange_y >= 1] <- "Comp2-only"
# Top N significant genes by combined adjusted p-values
merged$combined_padj <- pmax(merged$padj_x, merged$padj_y, na.rm = TRUE)
top_genes <- head(merged[order(merged$combined_padj), "gene"], input$crossplot_topgenes)
# Process highlight genes from text
highlight_genes <- if (nchar(trimws(input$volcano_select)) > 0) unlist(strsplit(input$crossplot_gene_label, "[ \t,]+")) else character(0)
if (length(highlight_genes) == 1 && highlight_genes == "") highlight_genes <- character(0)
highlight_text <- highlight_genes[highlight_genes != ""]
# Final labeling set
label_genes <- union(top_genes, highlight_text)
merged$label <- ifelse(merged$gene %in% label_genes, merged$gene, NA)
merged <- head(merged, input$crossplot_gene_count)
ggplot(merged, aes(x = log2FoldChange_x, y = log2FoldChange_y, color = category)) +
annotate("text", x = Inf, y = -Inf, hjust = 1.1, vjust = -1.1,
label = paste0("Pearson r = ", round(cor(merged$log2FoldChange_x, merged$log2FoldChange_y, method = 'pearson', use = 'complete.obs'), 3),
"
Spearman ρ = ", round(cor(merged$log2FoldChange_x, merged$log2FoldChange_y, method = 'spearman', use = 'complete.obs'), 3)),
size = 4) +
geom_point(alpha = 0.7) +
geom_abline(slope = 1, intercept = 0, linetype = "solid", color = "black") +
geom_vline(xintercept = c(-1, 1), linetype = "solid", color = "blue") +
geom_hline(yintercept = c(-1, 1), linetype = "solid", color = "blue") +
ggrepel::geom_text_repel(data = subset(merged, !is.na(label)), aes(label = label), max.overlaps = Inf, size = 5) +
scale_color_manual(values = c(
"Up-Up" = "firebrick",
"Down-Down" = "royalblue",
"Comp1-only" = "darkorange",
"Comp2-only" = "darkgreen",
"Other" = "gray"
)) +
theme_minimal() +
labs(title = "Cross Plot: log2FC vs log2FC",
x = paste("log2FC:", input$test_condition_x, "vs", input$reference_condition_x),
y = paste("log2FC:", input$test_condition_y, "vs", input$reference_condition_y),
color = "Regulation")
})
output$download_cross_plot <- downloadHandler(
filename = function() { "cross_plot.pdf" },
content = function(file) {
req(input$crossplot_gene_label, input$crossplot_gene_count, input$crossplot_topgenes)
req(res_x(), res_y())
merged <- merge(res_x(), res_y(), by = "gene", suffixes = c("_x", "_y"))
merged <- merged[order(merged$padj_x), ]
# Define categories
merged$category <- "Other"
merged$category[merged$log2FoldChange_x >= 1 & merged$log2FoldChange_y >= 1] <- "Up-Up"
merged$category[merged$log2FoldChange_x <= -1 & merged$log2FoldChange_y <= -1] <- "Down-Down"
merged$category[merged$log2FoldChange_x > 1 & abs(merged$log2FoldChange_y) <= 1] <- "Comp1-only"
merged$category[abs(merged$log2FoldChange_x) <= 1 & merged$log2FoldChange_y >= 1] <- "Comp2-only"
# Top N significant genes by combined adjusted p-values
merged$combined_padj <- pmax(merged$padj_x, merged$padj_y, na.rm = TRUE)
top_genes <- head(merged[order(merged$combined_padj), "gene"], input$crossplot_topgenes)
# Process highlight genes from text
highlight_genes <- if (nchar(trimws(input$volcano_select)) > 0) unlist(strsplit(input$crossplot_gene_label, "[ \t,]+")) else character(0)
highlight_text <- highlight_genes[highlight_genes != ""]
# Final labeling set
label_genes <- union(top_genes, highlight_text)
merged$label <- ifelse(merged$gene %in% label_genes, merged$gene, NA)
merged <- head(merged, input$crossplot_gene_count)
p<-ggplot(merged, aes(x = log2FoldChange_x, y = log2FoldChange_y, color = category)) +
annotate("text", x = Inf, y = -Inf, hjust = 1.1, vjust = -1.1,
label = paste0("Pearson r = ", round(cor(merged$log2FoldChange_x, merged$log2FoldChange_y, method = 'pearson', use = 'complete.obs'), 3),
"
Spearman ρ = ", round(cor(merged$log2FoldChange_x, merged$log2FoldChange_y, method = 'spearman', use = 'complete.obs'), 3)),
size = 4) +
geom_point(alpha = 0.7) +
geom_abline(slope = 1, intercept = 0, linetype = "solid", color = "black") +
geom_vline(xintercept = c(-1, 1), linetype = "solid", color = "blue") +
geom_hline(yintercept = c(-1, 1), linetype = "solid", color = "blue") +
ggrepel::geom_text_repel(data = subset(merged, !is.na(label)), aes(label = label), max.overlaps = Inf, size = 5) +
scale_color_manual(values = c(
"Up-Up" = "firebrick",
"Down-Down" = "royalblue",
"Comp1-only" = "darkorange",
"Comp2-only" = "darkgreen",
"Other" = "gray"
)) +
theme_minimal() +
labs(title = "Cross Plot: log2FC vs log2FC",
x = paste("log2FC:", input$test_condition_x, "vs", input$reference_condition_x),
y = paste("log2FC:", input$test_condition_y, "vs", input$reference_condition_y),
color = "Regulation")
pdf(file)
print(p)
dev.off()
})
output$download_cross_data <- downloadHandler(
filename = function() { "cross_plot_data.csv" },
content = function(file) {
req(res_x(), res_y())
merged <- merge(res_x(), res_y(), by = "gene", suffixes = c("_x", "_y"))
merged <- merged[order(merged$padj_x), ]
merged <- head(merged, input$crossplot_gene_count)
write.csv(merged, file, row.names = FALSE)
})
output$crossVennPlot <- renderPlot({
req(res_x(), res_y())
res_x_df <- res_x()
res_y_df <- res_y()
lfc_cutoff <- 1
padj_cutoff <- 0.05
up_x <- rownames(res_x_df[res_x_df$log2FoldChange > lfc_cutoff & res_x_df$padj < padj_cutoff, ])
up_y <- rownames(res_y_df[res_y_df$log2FoldChange > lfc_cutoff & res_y_df$padj < padj_cutoff, ])
down_x <- rownames(res_x_df[res_x_df$log2FoldChange < -lfc_cutoff & res_x_df$padj < padj_cutoff, ])
down_y <- rownames(res_y_df[res_y_df$log2FoldChange < -lfc_cutoff & res_y_df$padj < padj_cutoff, ])
up_venn <- VennDiagram::venn.diagram(
x = list(X_Up = up_x, Y_Up = up_y),
filename = NULL,
fill = c("darkorange", "darkgreen"),
alpha = 0.5,
main = "Upregulated Genes Venn"
)
down_venn <- VennDiagram::venn.diagram(
x = list(X_Down = down_x, Y_Down = down_y),
filename = NULL,
fill = c("royalblue", "purple"),
alpha = 0.5,
main = "Downregulated Genes Venn"
)
gridExtra::grid.arrange(
grid::grid.grabExpr(grid::grid.draw(up_venn)),
grid::grid.grabExpr(grid::grid.draw(down_venn)),
ncol = 2
)
})
gsea_result <- NULL
geneList <- NULL
m_list <- NULL
gsea_result <- NULL
geneList <- NULL
m_list <- NULL
observeEvent(input$gsea_metadata_column, {
req(input$gsea_metadata_column)
conditions <- unique(as.character(data$samples[[input$gsea_metadata_column]]))
updateSelectInput(session, "gsea_reference_condition", choices = conditions)
updateSelectInput(session, "gsea_test_condition", choices = conditions)
})
observeEvent(input$run_gsea, {
req(res_reactive(), input$gsea_db, input$lfc_threshold, input$padj_threshold, input$gsea_pvalue)
res <- res_reactive()
res <- res[!is.na(res$log2FoldChange) & !is.na(res$padj), ]
d1 <- res[, c("log2FoldChange", "padj")]
d1$gene <- rownames(d1)
# Filter gene list for GSEA
gene_vector <- d1[abs(d1$log2FoldChange) >= input$lfc_threshold & d1$padj <= input$padj_threshold, ]
geneList <- gene_vector$log2FoldChange
names(geneList) <- gene_vector$gene
geneList <- sort(geneList, decreasing = TRUE)
# Load MSigDB gene sets
library(msigdbr)
m_df <- msigdbr(species = "Homo sapiens",
collection = switch(input$gsea_db,
"GO" = "C5",
"KEGG" = "C2",
"Reactome" = "C2",
"Hallmark" = "H"),
subcategory = switch(input$gsea_db,
"GO" = "GO:BP",
"KEGG" = "CP:KEGG_MEDICUS",
"Reactome" = "CP:REACTOME",
"Hallmark" = NULL))
term2gene <- m_df[, c("gs_name", "gene_symbol")]
colnames(term2gene) <- c("ID", "gene")
# Store for downstream
geneList_rv(geneList)
m_list_rv(split(term2gene$gene, term2gene$ID))
# Run GSEA
gsea_result <- clusterProfiler::GSEA(
geneList = geneList,
TERM2GENE = term2gene,
pvalueCutoff = input$gsea_pvalue,
verbose = FALSE
)
gsea_result_rv(gsea_result)
})
observe({
gsea_result <- gsea_result_rv()
req(gsea_result)
df <- as.data.frame(gsea_result)
if (!"ID" %in% colnames(df)) {
showNotification("GSEA result missing pathway ID column.", type = "error")
return()
}
updateSelectInput(session, "gsea_selected_pathway", choices = unique(df$ID[df$ID %in% names(m_list_rv())]), selected = df$ID[1])
})
output$download_gsea_table <- downloadHandler(
filename = function() { "gsea_table.csv" },
content = function(file) {
gsea_result <- gsea_result_rv()
write.csv(as.data.frame(gsea_result), file, row.names = FALSE)
})
observeEvent(input$run_gsea, {
req(res_reactive(), input$gsea_db, input$lfc_threshold, input$padj_threshold, input$gsea_pvalue)
res <- res_reactive()
res <- res[!is.na(res$log2FoldChange) & !is.na(res$padj), ]
d1 <- res[, c("log2FoldChange", "padj")]
d1$gene <- rownames(d1)
# Filter gene list for GSEA
gene_vector <- d1[abs(d1$log2FoldChange) >= input$lfc_threshold & d1$padj <= input$padj_threshold, ]
geneList <- gene_vector$log2FoldChange
names(geneList) <- gene_vector$gene
geneList <- sort(geneList, decreasing = TRUE)
ranked_genes <- geneList
# Load gene sets
m_df <- msigdbr(species = "Homo sapiens",
collection = switch(input$gsea_db,
"GO" = "C5",
"KEGG" = "C2",
"Reactome" = "C2",
"Hallmark" = "H"),
subcategory = switch(input$gsea_db,
"GO" = "GO:BP",
"KEGG" = "CP:KEGG_MEDICUS",
"Reactome" = "CP:REACTOME",
"Hallmark" = NULL))
term2gene <- m_df[, c("gs_name", "gene_symbol")]
colnames(term2gene) <- c("ID", "gene")
geneList_rv(ranked_genes)
m_list_rv(split(term2gene$gene, term2gene$ID))
# Run GSEA
gsea_result <- clusterProfiler::GSEA(
geneList = ranked_genes,
TERM2GENE = term2gene,
pvalueCutoff = input$gsea_pvalue,
eps = 1e-15,
verbose = FALSE
)
gsea_result_rv(gsea_result)
# Enrichment plot for selected pathway
})
observe({
gsea_result <- gsea_result_rv()
req(gsea_result)
df <- as.data.frame(gsea_result)
if (!"ID" %in% colnames(df)) {
showNotification("GSEA result missing pathway ID column.", type = "error")
return()
}
updateSelectInput(session, "gsea_selected_pathway", choices = unique(df$ID[df$ID %in% names(m_list_rv())]), selected = df$ID[1])
})
output$gseaEnrichmentPlot <- renderPlot({
gsea_result <- gsea_result_rv()
geneList <- geneList_rv()
req(gsea_result, geneList, input$gsea_selected_pathway)
selected_id <- input$gsea_selected_pathway
res_df <- as.data.frame(gsea_result)
if (!(selected_id %in% res_df$ID)) {
showNotification("Selected pathway not found in GSEA result.", type = "error")
return(NULL)
}
core_genes <- unlist(strsplit(res_df$core_enrichment[res_df$ID == selected_id], "/"))
hits <- as.numeric(names(geneList) %in% core_genes)
running_score <- cumsum((hits / sum(hits)) - (1 - hits) / sum(1 - hits))
df <- data.frame(
Position = seq_along(geneList),
RunningScore = running_score,
RankMetric = geneList,
Hit = hits
)
common_x <- scale_x_continuous(limits = c(1, length(geneList)), expand = c(0, 0))
p1 <- ggplot(df, aes(x = Position, y = RunningScore)) +
common_x +
geom_line(color = "steelblue", linewidth = 1) +
geom_hline(yintercept = 0, linetype = "dashed") +
annotate("text", x = which.max(abs(running_score)), y = max(running_score), label = "Max ES", vjust = -1, size = 3.5) +
labs(y = "Running Enrichment Score", x = NULL) +
theme_minimal()
tick_positions <- which(df$Hit == 1)
p2 <- ggplot(df, aes(x = Position, y = 1)) +
common_x +
geom_tile(data = df[tick_positions, ], fill = "firebrick", height = 1, width = 3, alpha = 1) +
scale_y_continuous(expand = c(0, 0)) +
theme_void() +
labs(x = NULL, y = NULL)
p3 <- ggplot(df[is.finite(df$RankMetric), ], aes(x = Position, y = RankMetric)) +
common_x +
geom_bar(stat = "identity", fill = "grey60", width = 1) +
labs(x = "Rank in Ordered Gene List", y = "Ranked List Metric") +
theme_minimal()
g1 <- ggplotGrob(p1)
g2 <- ggplotGrob(p2)
g3 <- ggplotGrob(p3)
p4 <- ggplot(df, aes(x = Position, y = 1, fill = RankMetric)) +
geom_tile(height = 1) +
common_x +
scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0, guide = "none") +
theme_void() +
labs(x = NULL, y = NULL)
g4 <- ggplotGrob(p4)
maxWidth <- unit.pmax(g1$widths, g2$widths, g3$widths, g4$widths)
g1$widths <- g2$widths <- g3$widths <- g4$widths <- maxWidth
gridExtra::grid.arrange(g1, g2, g4, g3, ncol = 1, heights = c(3, 0.5, 0.5, 1))
})
output$download_gsea_enrichment_plot <- downloadHandler(
filename = function() { "gsea_enrichment_plot.pdf" },
content = function(file) {
gsea_result <- gsea_result_rv()
geneList <- geneList_rv()
req(gsea_result, geneList, input$gsea_selected_pathway)
selected_id <- input$gsea_selected_pathway
res_df <- as.data.frame(gsea_result)
if (!(selected_id %in% res_df$ID)) {
showNotification("Selected pathway not found in GSEA result.", type = "error")
return(NULL)
}
core_genes <- unlist(strsplit(res_df$core_enrichment[res_df$ID == selected_id], "/"))
hits <- as.numeric(names(geneList) %in% core_genes)
running_score <- cumsum((hits / sum(hits)) - (1 - hits) / sum(1 - hits))
df <- data.frame(
Position = seq_along(geneList),
RunningScore = running_score,
RankMetric = geneList,
Hit = hits
)
common_x <- scale_x_continuous(limits = c(1, length(geneList)), expand = c(0, 0))
p1 <- ggplot(df, aes(x = Position, y = RunningScore)) +
common_x +
geom_line(color = "steelblue", linewidth = 1) +
geom_hline(yintercept = 0, linetype = "dashed") +
annotate("text", x = which.max(abs(running_score)), y = max(running_score), label = "Max ES", vjust = -1, size = 3.5) +
labs(y = "Running Enrichment Score", x = NULL) +
theme_minimal()
tick_positions <- which(df$Hit == 1)
p2 <- ggplot(df, aes(x = Position, y = 1)) +
common_x +
geom_tile(data = df[tick_positions, ], fill = "firebrick", height = 1, width = 3, alpha = 1) +
scale_y_continuous(expand = c(0, 0)) +
theme_void() +
labs(x = NULL, y = NULL)
p3 <- ggplot(df[is.finite(df$RankMetric), ], aes(x = Position, y = RankMetric)) +
common_x +
geom_bar(stat = "identity", fill = "grey60", width = 1) +
labs(x = "Rank in Ordered Gene List", y = "Ranked List Metric") +
theme_minimal()
g1 <- ggplotGrob(p1)
g2 <- ggplotGrob(p2)
g3 <- ggplotGrob(p3)
p4 <- ggplot(df, aes(x = Position, y = 1, fill = RankMetric)) +
geom_tile(height = 1) +
common_x +
scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0, guide = "none") +
theme_void() +
labs(x = NULL, y = NULL)
g4 <- ggplotGrob(p4)
maxWidth <- unit.pmax(g1$widths, g2$widths, g3$widths, g4$widths)
g1$widths <- g2$widths <- g3$widths <- g4$widths <- maxWidth
pdf(file, width = 10, height = 7)
gridExtra::grid.arrange(g1, g2, g4, g3, ncol = 1, heights = c(3, 0.5, 0.5, 1))
dev.off()
})
output$gseaTable <- renderDT({
gsea_result <- gsea_result_rv()
req(gsea_result)
df <- as.data.frame(gsea_result)
if (!"ID" %in% colnames(df)) return(datatable(data.frame()))
df <- df[!is.na(df$p.adjust), ]
datatable(df, options = list(pageLength = 10, scrollX = TRUE), filter = "top")
})
output$download_gsea_dot_plot <- downloadHandler(
filename = function() { "gsea_dot_plot.pdf" },
content = function(file) {
gsea_result <- gsea_result_rv()
req(gsea_result)
gsea_result@result$.sign <- ifelse(gsea_result@result$NES > 0, "Activated", "Inhibited")
color_by <- if (!is.null(input$gsea_color_scale)) input$gsea_color_scale else "pvalue"
p <- if (input$gsea_split_dotplot & min(gsea_result@result$NES)<0) {
enrichplot::dotplot(gsea_result, showCategory = input$gsea_top_n, split = ".sign", color = color_by) +
theme(
axis.text.y = element_text(size = 6, face = "bold")  # adjust font size and style
) +
facet_grid(. ~ .sign)
} else {
enrichplot::dotplot(gsea_result, showCategory = input$gsea_top_n, color = color_by) +
theme(
axis.text.y = element_text(size = 6, face = "bold")  # adjust font size and style
)
}
pdf(file, width = 10, height = 7)
print(p)
dev.off()
})
output$gseaDotPlot <- renderPlot({
gsea_result <- gsea_result_rv()
req(gsea_result)
gsea_result@result$.sign <- ifelse(gsea_result@result$NES > 0, "Activated", "Inhibited")
color_by <- if (!is.null(input$gsea_color_scale)) input$gsea_color_scale else "pvalue"
if (input$gsea_split_dotplot & min(gsea_result@result$NES)<0) {
enrichplot::dotplot(gsea_result, showCategory = input$gsea_top_n, split = ".sign", color = color_by) +
theme(
axis.text.y = element_text(size = 6, face = "bold")  # adjust font size and style
) +
facet_grid(. ~ .sign)
} else {
enrichplot::dotplot(gsea_result, showCategory = input$gsea_top_n, color = color_by)+
theme(
axis.text.y = element_text(size = 6, face = "bold")  # adjust font size and style
)
}
})
onStop(function() {
cat("Shiny app closed. Exiting R...\n")
q("no")  # or use stopApp()
})
}
shinyApp(ui, server)
getwd()
setwd("/Users/temizna/RNAnalayzeR")
setwd("/Users/temizna/RNAnalyzeR")
devtools::install()
devtools::install()
library(RNAnalyzeR)
RNAnalyzeR::run_app()
library(grid)
gpar(col = "red")
devtools::install()
library(RNAnalyzeR)
RNAnalyzeR::run_app()
devtools::install()
getwd()
devtools::install()
library(RNAnalyzeR)
RNAnalyzeR::run_app()
devtools::build()
devtools::install()
library(RNAnalyzeR)
RNAnalyzeR::run_app()
RNAnalyzeR::run_app()
devtools::check()
setwd("/Users/temizna/RNAnalyzeR")
devtools::check()
